# Setup the passenger config file that becomes the /etc/init.d/passenger startup file.
# Primary change is to set the --max-pool-size option to match the size of the EC2 server
# and set passenger_log_level 0;
files:
  "/tmp/passenger.config":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      #
      # chkconfig: 2345 80 20
      # description: Passenger
      #

      EB_HTTP_PORT=$(/opt/elasticbeanstalk/bin/get-config container -k http_port)
      EB_APP_USER=$(/opt/elasticbeanstalk/bin/get-config container -k app_user)
      EB_APP_DEPLOY_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_dir)
      EB_APP_PID_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_pid_dir)
      EB_APP_LOG_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_log_dir)
      EB_SCRIPT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k script_dir)
      EB_SUPPORT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k support_dir)
      EB_NGINX_VERSION=$(/opt/elasticbeanstalk/bin/get-config container -k nginx_version)

      . $EB_SUPPORT_DIR/envvars
      . $EB_SCRIPT_DIR/use-app-ruby.sh

      if [ -f /etc/elasticbeanstalk/set-ulimit.sh ]; then
        . /etc/elasticbeanstalk/set-ulimit.sh
      fi

      # fixes http://code.google.com/p/phusion-passenger/issues/detail?id=614
      export HOME=/tmp
      export PASSENGER_DOWNLOAD_NATIVE_SUPPORT_BINARY=0

      if [ -d /etc/healthd ]; then
          STARTOPTS="--nginx-version $EB_NGINX_VERSION --nginx-config-template $EB_SUPPORT_DIR/conf/nginx_config_healthd.erb"
      else
          STARTOPTS="--nginx-version $EB_NGINX_VERSION --nginx-config-template $EB_SUPPORT_DIR/conf/nginx_config.erb"
      fi

      ENV_STAGE=${RACK_ENV:-$RAILS_ENV}    # Read from $RAILS_ENV if $RACK_ENV is empty
      if [ ${ENV_STAGE,,} = "production" ]; then    # Convert $ENV_STAGE to lower case and compare to "production"
        # Disable passenger friendly page for production stage
        # Set the max pool size to match the capabilities of the EC2 instance
        STARTOPTS="$STARTOPTS --no-friendly-error-pages --max-pool-size=3 --min-instances=3"
      fi

      GENERALOPTS="-p $EB_HTTP_PORT --pid-file $EB_APP_PID_DIR/passenger.pid"

      function start() {
        touch $EB_APP_LOG_DIR/passenger.log

        if [ -d /etc/healthd ]; then
          mkdir -p $EB_APP_LOG_DIR/healthd
          chown -R $EB_APP_USER:$EB_APP_USER $EB_APP_LOG_DIR/healthd
        fi

        chown $EB_APP_USER:$EB_APP_USER \
          $EB_APP_LOG_DIR/passenger.log
        passenger start $EB_APP_DEPLOY_DIR $STARTOPTS $GENERALOPTS \
          -d -e ${RACK_ENV:-$RAILS_ENV} --user $EB_APP_USER \
          --log-file $EB_APP_LOG_DIR/passenger.log
      }

      function stop() {
        passenger stop $GENERALOPTS
      }

      function status() {
        passenger status $GENERALOPTS
      }

      case "$1" in
        start)
          start
          ;;
        stop)
          stop
          ;;
        status)
          status
          ;;
        restart|graceful)
          stop
          start
          ;;
        reload)
          su -s /bin/bash -c "touch $EB_APP_DEPLOY_DIR/tmp/restart.txt" $EB_APP_USER
          ;;
        *)
          echo "Usage: $0 {start|stop|restart|reload|status}"
          exit 1
          ;;
      esac

      exit 0

  #
  "/tmp/nginx_config.erb":
    mode: "000755"
    owner: root
    group: root
    content: |
      ##############################################################
      #  Phusion Passenger Standalone uses a template file to
      #  generate an Nginx configuration file. The original template
      #  file can be found by running the following command:
      #
      #    ls $(passenger-config about resourcesdir)/templates/standalone/config.erb
      #
      #  You can create a copy of this template file and customize it
      #  to your liking. Just make sure you tell Phusion Passenger Standalone
      #  to use your template file by passing the --nginx-config-template
      #  parameter.
      #
      #  *** NOTE ***
      #  If you customize the template file, make sure you keep an eye
      #  on the original template file and merge any changes.
      #  New Phusion Passenger features may require changes to the template
      #  file.

      # Search for EB_MODIFICATION in this file to find customizations done by AWS Elastic Beanstalk

      ##############################################################
      <%
      orig_app = @apps.first

      orig_app[:server_names] = ['restructure-demo.consected.com']

      %>


      master_process on;
      worker_processes auto;

      daemon on;
      error_log '<%= @options[:log_file] %>' <% if debugging? %>info<% end %>;
      pid '<%= @options[:pid_file] %>';


      <% if Process.euid == 0 %>
          <% if @options[:user] %>
              <%# Run workers as the given user. The master process will always run as root and will be able to bind to any port. %>
              user <%= @options[:user] %> <%= default_group_for(@options[:user]) %>;
          <% else %>
              <%# Prevent running Nginx workers as nobody. %>
              user <%= current_user %> <%= default_group_for(current_user) %>;
          <% end %>
      <% end %>

      events {
          worker_connections 1024;
      }

      http {
          log_format debug '[$time_local] $msec  "$request" $status conn=$connection sent=$bytes_sent body_sent=$body_bytes_sent';
          include '<%= PhusionPassenger.resources_dir %>/mime.types';
          passenger_ruby <%= PlatformInfo.ruby_command %>;
          passenger_root '<%= location_config_filename %>';
          passenger_abort_on_startup_error on;
          passenger_ctl cleanup_pidfiles <%= serialize_strset("#{@temp_dir}/temp_dir_toucher.pid") %>;
          passenger_user_switching off;
          passenger_max_pool_size <%= @options[:max_pool_size] %>;
          passenger_min_instances <%= @options[:min_instances] %>;

          <% if @options[:user] %>
              passenger_user <%= @options[:user] %>;
              passenger_default_user <%= @options[:user] %>;
              passenger_analytics_log_user <%= @options[:user] %>;
          <% else %>
              passenger_user <%= current_user %>;
              passenger_default_user <%= current_user %>;
              passenger_analytics_log_user <%= current_user %>;
          <% end %>
          passenger_log_level 0;
          <% if debugging? %>passenger_log_level 2;<% end %>
          <% if @options[:temp_dir] %>passenger_temp_dir '<%= @options[:temp_dir] %>';<% end %>
          <% if @options[:rolling_restarts] %>passenger_rolling_restarts on;<% end %>
          <% if @options[:resist_deployment_errors] %>passenger_resist_deployment_errors on;<% end %>
          <% if !@options[:load_shell_envvars] %>passenger_load_shell_envvars off;<% end %>

          <% if !@options[:friendly_error_pages].nil? -%>
              passenger_friendly_error_pages <%= boolean_config_value(@options[:friendly_error_pages]) %>;
          <% end %>

          <% if @options[:union_station_gateway_address] %>
              union_station_gateway_address <%= @options[:union_station_gateway_address] %>;
              union_station_gateway_port <%= @options[:union_station_gateway_port] %>;
              union_station_gateway_cert -;
          <% end %>

          default_type application/octet-stream;
          types_hash_max_size 2048;
          server_names_hash_bucket_size 64;
          client_max_body_size 100m;
          access_log off;
          keepalive_timeout 60;
          underscores_in_headers on;
          gzip on;
          gzip_comp_level 4;
          gzip_proxied any;
          gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

          <% if @apps.size > 1 %>
          # Default server entry.
          server {
              <% if @options[:ssl] %>
                  <% if @options[:ssl_port] %>
                      listen <%= nginx_listen_address %>;
                      listen <%= nginx_listen_address_with_ssl_port %> ssl;
                  <% else %>
                      listen <%= nginx_listen_address %> ssl;
                  <% end %>
              <% else %>
                  listen <%= nginx_listen_address %>;
              <% end %>
              root '<%= PhusionPassenger.resources_dir %>/standalone_default_root';
          }
          <% end %>

          <% if @options[:ping_port] %>
          server {
              listen <%= nginx_listen_address(@options, true) %>;
              root '<%= PhusionPassenger.resources_dir %>/standalone_default_root';
          }
          <% end %>

          <% for app in @apps %>
          server {
              # EB_MODIFICATION begin
              access_log off;
              # EB_MODIFICATION end
              <% if app[:ssl] %>
                  <% if app[:ssl_port] %>
                      listen <%= nginx_listen_address(app) %>;
                      listen <%= nginx_listen_address_with_ssl_port(app) %> ssl;
                  <% else %>
                      listen <%= nginx_listen_address(app) %> ssl;
                  <% end %>
              <% else %>
                  listen <%= nginx_listen_address(app) %>;
              <% end %>
              server_name <%= app[:server_names].join(' ') %>;
              <% if app[:static_files_dir] %>
                  root '<%= app[:static_files_dir] %>';
              <% else %>
                  root '<%= app[:root] %>/public';
              <% end %>
              passenger_app_root '<%= app[:root] %>';
              passenger_enabled on;
              passenger_app_env <%= app[:environment] %>;
              passenger_spawn_method <%= app[:spawn_method] %>;
              <% if app[:app_type] %>passenger_app_type <%= app[:app_type] %>;<% end %>
              <% if app[:startup_file] %>passenger_startup_file <%= app[:startup_file] %>;<% end %>
              <% if app[:concurrency_model] != DEFAULT_CONCURRENCY_MODEL %>passenger_concurrency_model <%= app[:concurrency_model] %>;<% end %>
              <% if app[:thread_count] != DEFAULT_THREAD_COUNT %>passenger_thread_count <%= app[:thread_count] %>;<% end %>
              <% if app[:min_instances] %>passenger_min_instances <%= app[:min_instances] %>;<% end %>
              <% if app[:restart_dir] %>passenger_restart_dir '<%= app[:restart_dir] %>';<% end %>
              <% if @options[:sticky_sessions] %>passenger_sticky_sessions on;<% end %>
              <% if @options[:sticky_sessions_cookie_name] %>passenger_sticky_sessions_cookie_name '<%= sticky_sessions_cookie_name %>';<% end %>
              <% if app[:union_station_key] %>
                  union_station_support on;
                  union_station_key <%= app[:union_station_key] %>;
              <% end %>
              <% if app[:ssl] %>
                  ssl_certificate <%= app[:ssl_certificate] %>;
                  <% if app[:ssl_trusted_certificate] %>
                  ssl_trusted_certificate <%= app[:ssl_trusted_certificate] %>;
                  <% end %>
                  ssl_certificate_key <%= app[:ssl_certificate_key] %>;
              <% end %>

              # Rails asset pipeline support.
              location ~ "^/assets/.+-[0-9a-f]{64}\..+" {
                  error_page 490 = @static_asset;
                  error_page 491 = @dynamic_request;
                  recursive_error_pages on;

                  if (-f $request_filename) {
                      return 490;
                  }
                  if (!-f $request_filename) {
                      return 491;
                  }
              }
              location @static_asset {
                  gzip_static on;
                  expires max;
                  add_header Cache-Control public;
                  add_header ETag "";
              }
              location @dynamic_request {
                  passenger_enabled on;
              }
          }
          passenger_pre_start https://<%= orig_app[:server_names].first %>:443;
          <% end %>
      }


  "/tmp/nginx_config_healthd.erb":
    mode: "000755"
    owner: root
    group: root
    content: |
      ##############################################################
      #  Phusion Passenger Standalone uses a template file to
      #  generate an Nginx configuration file. The original template
      #  file can be found by running the following command:
      #
      #    ls $(passenger-config about resourcesdir)/templates/standalone/config.erb
      #
      #  You can create a copy of this template file and customize it
      #  to your liking. Just make sure you tell Phusion Passenger Standalone
      #  to use your template file by passing the --nginx-config-template
      #  parameter.
      #
      #  *** NOTE ***
      #  If you customize the template file, make sure you keep an eye
      #  on the original template file and merge any changes.
      #  New Phusion Passenger features may require changes to the template
      #  file.

      # Search for EB_MODIFICATION in this file to find customizations done by AWS Elastic Beanstalk

      ##############################################################
      <%
      orig_app = @apps.first

      orig_app[:server_names] = ['restructure-demo.consected.com']

      %>


      master_process on;
      worker_processes auto;

      daemon on;
      error_log '<%= @options[:log_file] %>' <% if debugging? %>info<% end %>;
      pid '<%= @options[:pid_file] %>';

      <% if Process.euid == 0 %>
          <% if @options[:user] %>
              <%# Run workers as the given user. The master process will always run as root and will be able to bind to any port. %>
              user <%= @options[:user] %> <%= default_group_for(@options[:user]) %>;
          <% else %>
              <%# Prevent running Nginx workers as nobody. %>
              user <%= current_user %> <%= default_group_for(current_user) %>;
          <% end %>
      <% end %>

      events {
          worker_connections 1024;
      }

      http {
          log_format debug '[$time_local] $msec  "$request" $status conn=$connection sent=$bytes_sent body_sent=$body_bytes_sent';
          include '<%= PhusionPassenger.resources_dir %>/mime.types';
          passenger_ruby <%= PlatformInfo.ruby_command %>;
          passenger_root '<%= location_config_filename %>';
          passenger_abort_on_startup_error on;
          passenger_ctl cleanup_pidfiles <%= serialize_strset("#{@temp_dir}/temp_dir_toucher.pid") %>;
          passenger_user_switching off;
          passenger_max_pool_size <%= @options[:max_pool_size] %>;
          passenger_min_instances <%= @options[:min_instances] %>;

          # EB_MODIFICATION begin
          # healthd specific log format
          log_format healthd '$msec"$uri"'
                             '$status"$request_time"$upstream_response_time"'
                             '$http_x_forwarded_for';
          # EB_MODIFICATION end

          <% if @options[:user] %>
              passenger_user <%= @options[:user] %>;
              passenger_default_user <%= @options[:user] %>;
              passenger_analytics_log_user <%= @options[:user] %>;
          <% else %>
              passenger_user <%= current_user %>;
              passenger_default_user <%= current_user %>;
              passenger_analytics_log_user <%= current_user %>;
          <% end %>
          passenger_log_level 0;
          <% if debugging? %>passenger_log_level 2;<% end %>
          <% if @options[:temp_dir] %>passenger_temp_dir '<%= @options[:temp_dir] %>';<% end %>
          <% if @options[:rolling_restarts] %>passenger_rolling_restarts on;<% end %>
          <% if @options[:resist_deployment_errors] %>passenger_resist_deployment_errors on;<% end %>
          <% if !@options[:load_shell_envvars] %>passenger_load_shell_envvars off;<% end %>

          <% if !@options[:friendly_error_pages].nil? -%>
              passenger_friendly_error_pages <%= boolean_config_value(@options[:friendly_error_pages]) %>;
          <% end %>

          <% if @options[:union_station_gateway_address] %>
              union_station_gateway_address <%= @options[:union_station_gateway_address] %>;
              union_station_gateway_port <%= @options[:union_station_gateway_port] %>;
              union_station_gateway_cert -;
          <% end %>

          default_type application/octet-stream;
          types_hash_max_size 2048;
          server_names_hash_bucket_size 64;
          client_max_body_size 6000m;
          access_log off;
          keepalive_timeout 60;
          underscores_in_headers on;
          gzip on;
          gzip_comp_level 4;
          gzip_proxied any;
          gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

          <% if @apps.size > 1 %>
          # Default server entry.
          server {

              <% if @options[:ssl] %>
                  <% if @options[:ssl_port] %>
                      listen <%= nginx_listen_address %>;
                      listen <%= nginx_listen_address_with_ssl_port %> ssl;
                  <% else %>
                      listen <%= nginx_listen_address %> ssl;
                  <% end %>
              <% else %>
                  listen <%= nginx_listen_address %>;
              <% end %>
              root '<%= PhusionPassenger.resources_dir %>/standalone_default_root';
          }
          <% end %>

          <% if @options[:ping_port] %>
          server {
              listen <%= nginx_listen_address(@options, true) %>;
              root '<%= PhusionPassenger.resources_dir %>/standalone_default_root';
          }
          <% end %>

          <% for app in @apps %>
          server {
              # EB_MODIFICATION begin
              access_log off;

              # healthd specific logs
              if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
                  set $year $1;
                  set $month $2;
                  set $day $3;
                  set $hour $4;
              }
              access_log /var/app/support/logs/healthd/application.log.$year-$month-$day-$hour healthd;
              # EB_MODIFICATION end

              <% if app[:ssl] %>
                  <% if app[:ssl_port] %>
                      listen <%= nginx_listen_address(app) %>;
                      listen <%= nginx_listen_address_with_ssl_port(app) %> ssl;
                  <% else %>
                      listen <%= nginx_listen_address(app) %> ssl;
                  <% end %>
              <% else %>
                  listen <%= nginx_listen_address(app) %>;
              <% end %>

              server_name restructure-demo.consected.com;
              if ($host != "restructure-demo.consected.com") {
                rewrite ^ https://restructure-demo.consected.com$uri permanent;
              }

              <% if app[:static_files_dir] %>
                  root '<%= app[:static_files_dir] %>';
              <% else %>
                  root '<%= app[:root] %>/public';
              <% end %>
              passenger_app_root '<%= app[:root] %>';
              passenger_enabled on;
              passenger_app_env <%= app[:environment] %>;
              passenger_spawn_method <%= app[:spawn_method] %>;
              <% if app[:app_type] %>passenger_app_type <%= app[:app_type] %>;<% end %>
              <% if app[:startup_file] %>passenger_startup_file <%= app[:startup_file] %>;<% end %>
              <% if app[:concurrency_model] != DEFAULT_CONCURRENCY_MODEL %>passenger_concurrency_model <%= app[:concurrency_model] %>;<% end %>
              <% if app[:thread_count] != DEFAULT_THREAD_COUNT %>passenger_thread_count <%= app[:thread_count] %>;<% end %>
              <% if app[:min_instances] %>passenger_min_instances <%= app[:min_instances] %>;<% end %>
              <% if app[:restart_dir] %>passenger_restart_dir '<%= app[:restart_dir] %>';<% end %>
              <% if @options[:sticky_sessions] %>passenger_sticky_sessions on;<% end %>
              <% if @options[:sticky_sessions_cookie_name] %>passenger_sticky_sessions_cookie_name '<%= sticky_sessions_cookie_name %>';<% end %>
              <% if app[:union_station_key] %>
                  union_station_support on;
                  union_station_key <%= app[:union_station_key] %>;
              <% end %>
              <% if app[:ssl] %>
                  ssl_certificate <%= app[:ssl_certificate] %>;
                  <% if app[:ssl_trusted_certificate] %>
                  ssl_trusted_certificate <%= app[:ssl_trusted_certificate] %>;
                  <% end %>
                  ssl_certificate_key <%= app[:ssl_certificate_key] %>;
                  ssl_protocols TLSv1.2 TLSv1.3;
                  ssl_prefer_server_ciphers on;
                  ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH EDH+aRSA  !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";

              <% end %>

              # Rails asset pipeline support.
              location ~ "^/assets/.+-[0-9a-f]{64}\..+" {
                  error_page 490 = @static_asset;
                  error_page 491 = @dynamic_request;
                  recursive_error_pages on;

                  if (-f $request_filename) {
                      return 490;
                  }
                  if (!-f $request_filename) {
                      return 491;
                  }
              }
              location @static_asset {
                  gzip_static on;
                  expires max;
                  add_header Cache-Control public;
                  add_header ETag "";
              }
              location @dynamic_request {
                  passenger_enabled on;
              }
          }
          passenger_pre_start https://<%= orig_app[:server_names].first %>:443;
          <% end %>
      }




container_commands:
  01_config_passenger:
    command: "cp /tmp/passenger.config /opt/elasticbeanstalk/support/conf/passenger"

  02_config_nginx:
    command: "cp /tmp/nginx_config.erb /opt/elasticbeanstalk/support/conf/nginx_config.erb"

  03_config_healthd_nginx:
    command: "cp /tmp/nginx_config_healthd.erb /opt/elasticbeanstalk/support/conf/nginx_config_healthd.erb"

  99_restart_passenger:
      command: "service passenger restart || service passenger start"
