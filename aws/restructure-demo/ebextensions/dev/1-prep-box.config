files:
  "/root/setup_certbot_docker.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      CRON_DIR=/etc/cron.d

      if [ ! "$(which systemctl)" ]; then
        function systemctl() {
          echo $@
          if [ "$1" == 'is-active' ]; then
            if [ -z "$(service $2 status | grep "is stopped")" ]; then
              echo "$2 active"
            else
              echo "$2 inactive"
            fi
          elif [ "$1" == 'is-enabled' ]; then
            if [ -z "$(service --status-all | grep $2)" ]; then
              echo "$2 active"
            else
              echo "$2 inactive"
            fi
          else
            service $2 $1
          fi
        }
      fi


      function setup_certbot_docker() {

        local docker_was_inactive=$(systemctl is-active docker | grep "inactive")
        yum install -y docker
        systemctl start docker
        systemctl enable docker
        docker pull certbot/dns-route53

        if [ ! -z "${docker_was_inactive}" ]; then
          # Docker was previously inactive. Stop it again
          systemctl stop docker
        fi

        certbot_docker_refresher

        echo $0

      }

      function certbot_docker_refresher() {
        echo $@

        cat > ${CRON_DIR}/refreshcertbot <<EOF
          SHELL=/bin/bash
          PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
          MAILTO=""
          HOME=/root/setup
          BOX_NAME=${box_name}
          16 4 * * * source /root/setup_certbot_docker.sh ; certbot_issue_certificate ${INTERNAL_HOSTNAME} ${EXTERNAL_HOSTNAME}
      EOF


      }

      # Use environment variable FORCE_REISSUE=true to force the reissue even if certs appear to have a valid date
      function certbot_issue_certificate() {
        echo $@

        local INT_DOMAIN=$1
        local EXT_DOMAIN=$2
        local extra_args=$3

        local docker_was_inactive=$(systemctl is-active docker | grep "inactive")

        if [ -z ${EXT_DOMAIN} ]; then
          local ext_domain_flag=""
        else
          local ext_domain_flag="--domains ${EXT_DOMAIN}"
        fi

        local old_certs=$(find /etc/pki/tls/certs/ -name 'server.*' -mtime +35)

        if [ ! -e /etc/pki/tls/certs/server.key ] || [ ! -z "$old_certs" ] || [ "$FORCE_REISSUE" == 'true' ]; then

          echo INFO "Reissue certificates"

          # Ensure docker is in a good state, and iptables are set
          systemctl restart docker

          rm -rf /etc/letsencrypt/live/*
          rm -rf /etc/letsencrypt/archive/*

          docker run --rm --name dns-route53 \
            -v "/var/echo/letsencrypt:/var/echo/letsencrypt" \
            -v "/etc/letsencrypt:/etc/letsencrypt" \
            -v "/var/lib/letsencrypt:/var/lib/letsencrypt" --privileged ${extra_args} \
            certbot/dns-route53 certonly \
            --non-interactive \
            --dns-route53 \
            --email ${EMAIL} \
            --domains ${INT_DOMAIN} ${ext_domain_flag} \
            --agree-tos \
            --keep-until-expiring \
            --force-renewal

          if [ -f /etc/letsencrypt/live/${INT_DOMAIN}*/privkey.pem ]; then
            rm -f /etc/pki/tls/certs/server.key
            rm -f /etc/pki/tls/certs/server.crt
            ln -s /etc/letsencrypt/live/${INT_DOMAIN}*/privkey.pem /etc/pki/tls/certs/server.key
            ln -s /etc/letsencrypt/live/${INT_DOMAIN}*/fullchain.pem /etc/pki/tls/certs/server.crt
            
            certbot_issued_reboot_services
          else
            echo ERROR "New certificates not found"
          fi

          if [ ! -z "${docker_was_inactive}" ]; then
            # Docker was previously inactive. Stop it again
            systemctl stop docker
          fi
        else
          echo INFO "Not reissuing certificates yet"
        fi
      }

      function certbot_issued_reboot_services() {
        echo $@
        local services='httpd passenger vpnserver'
        for svc in ${services}; do
          if [ "$(service_enabled ${svc})" ] && [ -z "$(service_not_running ${svc})" ]; then
            echo INFO "Restarting service ${svc} after certbot issued certificate"
            systemctl restart ${svc}
          fi
        done

        if [ -f /usr/local/bin/certbot_callback_after_issue.sh ]; then
          echo INFO "Calling certbot_callback_after_issue.sh"
          /usr/local/bin/certbot_callback_after_issue.sh
        fi

        echo $0
      }



container_commands:
  01_prep_box:
    command: |
      set -xv 

      EXTERNAL_HOSTNAME=restructure-demo.consected.com
      EMAIL=info@consected.com 
      
      source /root/setup_certbot_docker.sh
      setup_certbot_docker
      certbot_issue_certificate ${EXTERNAL_HOSTNAME} 
